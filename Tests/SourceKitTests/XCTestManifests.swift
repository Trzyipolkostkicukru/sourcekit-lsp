#if !canImport(ObjectiveC)
import XCTest

extension CodeActionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CodeActionTests = [
        ("testCodeActionResponseLegacySupport", testCodeActionResponseLegacySupport),
        ("testCodeActionResponseRespectsSupportedKinds", testCodeActionResponseRespectsSupportedKinds),
        ("testCommandEncoding", testCommandEncoding),
    ]
}

extension DocumentColorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DocumentColorTests = [
        ("testEmptyText", testEmptyText),
        ("testPresentation", testPresentation),
        ("testSimple", testSimple),
        ("testWeirdWhitespace", testWeirdWhitespace),
    ]
}

extension DocumentSymbolTest {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DocumentSymbolTest = [
        ("testAll", testAll),
        ("testEmpty", testEmpty),
        ("testEnum", testEnum),
        ("testStruct", testStruct),
        ("testUnicode", testUnicode),
    ]
}

extension FoldingRangeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FoldingRangeTests = [
        ("testEmptyText", testEmptyText),
        ("testLineFoldingOnly", testLineFoldingOnly),
        ("testPartialLineFolding", testPartialLineFolding),
        ("testRangeLimit", testRangeLimit),
    ]
}

extension ImplementationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ImplementationTests = [
        ("testImplementation", testImplementation),
    ]
}

extension LocalClangTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LocalClangTests = [
        ("testFoldingRange", testFoldingRange),
        ("testSymbolInfo", testSymbolInfo),
    ]
}

extension LocalSwiftTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LocalSwiftTests = [
        ("testDocumentSymbolHighlight", testDocumentSymbolHighlight),
        ("testEditing", testEditing),
        ("testEditorPlaceholderParsing", testEditorPlaceholderParsing),
        ("testHover", testHover),
        ("testHoverNameEscaping", testHoverNameEscaping),
        ("testSymbolInfo", testSymbolInfo),
        ("testXMLToMarkdownComment", testXMLToMarkdownComment),
        ("testXMLToMarkdownDeclaration", testXMLToMarkdownDeclaration),
    ]
}

extension SKTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SKTests = [
        ("testCodeCompleteSwiftTibs", testCodeCompleteSwiftTibs),
        ("testIndexSwiftModules", testIndexSwiftModules),
        ("testInitJSON", testInitJSON),
        ("testInitLocal", testInitLocal),
    ]
}

extension SwiftCompletionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SwiftCompletionTests = [
        ("testCompletion", testCompletion),
        ("testCompletionPosition", testCompletionPosition),
        ("testCompletionSnippetSupport", testCompletionSnippetSupport),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(CodeActionTests.__allTests__CodeActionTests),
        testCase(DocumentColorTests.__allTests__DocumentColorTests),
        testCase(DocumentSymbolTest.__allTests__DocumentSymbolTest),
        testCase(FoldingRangeTests.__allTests__FoldingRangeTests),
        testCase(ImplementationTests.__allTests__ImplementationTests),
        testCase(LocalClangTests.__allTests__LocalClangTests),
        testCase(LocalSwiftTests.__allTests__LocalSwiftTests),
        testCase(SKTests.__allTests__SKTests),
        testCase(SwiftCompletionTests.__allTests__SwiftCompletionTests),
    ]
}
#endif
